services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.debug
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-debug.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/static:/usr/share/nginx/html:ro
    networks:
      - debug-net
    depends_on:
      - authservice

  authservice:
    build:
      context: ./authservice
      dockerfile: Dockerfile.debug
    hostname: authservice
    environment:
      # <<: *db_env
      DB_CONNECTION: "postgresql://${AUTH_DB_USER}:${AUTH_DB_PASSWORD}@postgresql:5432/${AUTH_DB_NAME}?\
                      options=-c%20search_path%3D${AUTH_DB_SCHEMA}"
      # DB_CONNECTION: "postgresql://${AUTH_DB_USER}:${AUTH_DB_PASSWORD}@postgresql:5432/${AUTH_DB_NAME}"
      HOME: /service
      CCACHE_DIR: /service/.ccache
      SECRET_JWT_KEY: "${SECRET_JWT_KEY}"
    security_opt:
      - seccomp=./authservice/seccomp_config.json
    command:
      - ./run_as_user.sh
      - "${UID}"
      - "${GID}"
      - sh
      - -lc
      - "make build-debug && ./build-debug/authservice --config configs/static_config.yaml \
                                                       --config_vars configs/config_vars.yaml"
      # - "make build-debug && make test-debug && ./build-debug/authservice --config configs/static_config.yaml \
                                                                           # --config_vars configs/config_vars.yaml"
    volumes:
      - ./authservice:/service
    networks:
      - debug-net
    depends_on:
      - postgresql
  
  userprofilerservice:
    build:
      context: ./userprofilerservice
      dockerfile: Dockerfile.debug
    hostname: userprofileservice
    environment:
      ###### замена переменных
      DB_CONNECTION: "postgresql://${USERPROFILER_DB_USER}:${USERPROFILER_DB_PASSWORD}@postgresql:5432/${USERPROFILER_DB_NAME}"
      HOME: /service
      CCACHE_DIR: /service/.ccache
    security_opt:
      - seccomp=./userprofilerservice/seccomp_config.json
    command:
      - ./run_as_user.sh
      - "${UID}"
      - "${GID}"
      - sh
      - -lc
      - "make build-debug && ./build-debug/userprofilerservice --config configs/static_config.yaml \
                                                        --config_vars configs/config_vars.yaml"
    volumes:
      - ./userprofilerservice:/service
    networks:
      - debug-net
    depends_on:
      - postgresql
  
  cartservice:
    build:
      context: ./cartservice
      dockerfile: Dockerfile.debug
    hostname: cartservice
    environment:
      DB_CONNECTION: "postgresql://${CART_DB_USER}:${CART_DB_PASSWORD}@postgresql:5432/${CART_DB_NAME}?\
                      options=-c%20search_path%3D${CART_DB_SCHEMA}"
      HOME: /service
      CCACHE_DIR: /service/.ccache
    security_opt:
      - seccomp=./cartservice/seccomp_config.json
    command:
      - ./run_as_user.sh
      - "${UID}"
      - "${GID}"
      - sh
      - -lc
      - "make build-debug && ./build-debug/cartservice --config configs/static_config.yaml \
                                                       --config_vars configs/config_vars.yaml"
    volumes:
      - ./cartservice:/service
    networks:
      - debug-net
    depends_on:
      - postgresql
  
  catalogservice:
    build:
      context: ./catalogservice
      dockerfile: Dockerfile.debug
    hostname: catalogservice
    environment:
      ###### замена переменных
      DB_CONNECTION: "postgresql://${CATALOG_DB_USER}:${CATALOG_DB_PASSWORD}@postgresql:5432/${CATALOG_DB_NAME}?\
                      options=-c%20search_path%3D${CATALOG_DB_SCHEMA}"

      HOME: /service
      CCACHE_DIR: /service/.ccache
    security_opt:
      - seccomp=./catalogservice/seccomp_config.json
    command:
      - ./run_as_user.sh
      - "${UID}"
      - "${GID}"
      - sh
      - -lc
      - "make build-debug && ./build-debug/catalogservice --config configs/static_config.yaml \
                                                          --config_vars configs/config_vars.yaml"
    volumes:
      - ./catalogservice:/service
    networks:
      - debug-net
    depends_on:
      - postgresql
  
  orderservice:
    build:
      context: ./orderservice
      dockerfile: Dockerfile.debug
    hostname: orderservice
    environment:
      ###### замена переменных
      DB_CONNECTION: "postgresql://${ORDER_DB_USER}:${ORDER_DB_PASSWORD}@postgresql:5432/${ORDER_DB_NAME}?\
                      options=-c%20search_path%3D${ORDER_DB_SCHEMA}"
      
      # KAFKA_BROKERS: "${KAFKA_BROKERS}"
      # KAFKA_GROUP_ID: "${ORDERSERVICE_KAFKA_GROUP_NAME}"

      HOME: /service
      CCACHE_DIR: /service/.ccache
    security_opt:
      - seccomp=./orderservice/seccomp_config.json
    command:
      - ./run_as_user.sh
      - "${UID}"
      - "${GID}"
      - sh
      - -lc
      - "make build-debug && ./build-debug/orderservice --config configs/static_config.yaml \
                                                          --config_vars configs/config_vars.yaml"
    volumes:
      - ./orderservice:/service
    networks:
      - debug-net
    depends_on:
      - postgresql
      # - kafka
  
  postgresql:
    container_name: postgresql
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # Стандартная бд, которую лучше не использовать для консистентности 
                                  # баз данных в сервисе (будем все используемые бд создавать миграциями)
    volumes:
      - ./postgresql/build:/docker-entrypoint-initdb.d
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - debug-net
    ports:
      - 5432 # только для дебаг версии
      
  # zookeeper:
    # image: confluentinc/cp-zookeeper:7.4.0
    # hostname: zookeeper
    # container_name: zookeeper
    # environment:
      # ZOOKEEPER_CLIENT_PORT: 2181
      # ZOOKEEPER_TICK_TIME: 2000
    # networks:
      # - debug-net

  # kafka:
    # image: confluentinc/cp-kafka:7.4.0
    # environment:
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    # ports:
      # - 9092 # только для дебаг версии
    # networks:
      # - debug-net
    # depends_on:
      # - zookeeper

volumes:
  postgresql_data:

networks:
  debug-net:
    driver: bridge

